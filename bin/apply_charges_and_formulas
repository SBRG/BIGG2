#!/usr/bin/env python3

"""Apply the charges and formulas from large models to related small models."""

from cobradb.models import *

# child, parent
models = [
    ('e_coli_core', 'iJO1366'),
    ('iAB_RBC_283', 'RECON1'),
    ('iAT_PLT_636', 'RECON1'),
]

session = Session()

for child, parent in models:
    print('\n\n%s <- %s\n' % (child, parent))
    parent_data = (session.query(Component.bigg_id,
                                 Compartment.bigg_id,
                                 ModelCompartmentalizedComponent.charge,
                                 ModelCompartmentalizedComponent.formula)
                      .join(CompartmentalizedComponent,
                            CompartmentalizedComponent.component_id == Component.id)
                      .join(Compartment,
                            Compartment.id == CompartmentalizedComponent.compartment_id)
                      .join(ModelCompartmentalizedComponent,
                            ModelCompartmentalizedComponent.compartmentalized_component_id == CompartmentalizedComponent.id)
                      .join(Model, Model.id == ModelCompartmentalizedComponent.model_id)
                      .filter(Model.bigg_id == parent)
                      .all())
    parent_data_dict = {'%s_%s' % (m, c): {'charge': charge, 'formula': formula}
                        for m, c, charge, formula in parent_data}
    child_mets = (session.query(Component.bigg_id, Compartment.bigg_id, ModelCompartmentalizedComponent)
                  .join(CompartmentalizedComponent,
                        CompartmentalizedComponent.component_id == Component.id)
                  .join(Compartment,
                        Compartment.id == CompartmentalizedComponent.compartment_id)
                  .join(ModelCompartmentalizedComponent,
                        ModelCompartmentalizedComponent.compartmentalized_component_id == CompartmentalizedComponent.id)
                  .join(Model, Model.id == ModelCompartmentalizedComponent.model_id)
                  .filter(Model.bigg_id == child)
                  .all())
    for bigg_id, compartment, model_compartmentalized_component in child_mets:
        with_comp = '%s_%s' % (bigg_id, compartment)
        for attr in ['charge', 'formula']:
            try:
                new_attr = parent_data_dict[with_comp][attr]
            except KeyError:
                print('No %s found for %s in %s' % (attr, with_comp, parent))
            else:
                if new_attr is None:
                    print('%s for %s is None in %s' % (attr, with_comp, parent))
                else:
                    print('Setting %s for %s to %s in %s' % (attr, with_comp, new_attr, child))
                    setattr(model_compartmentalized_component, attr, new_attr)

session.commit()
session.close()
